<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>펭귄의 외부 저장소</title><link>https://seungyeop-lee.github.io/blog/</link><description>Recent content on 펭귄의 외부 저장소</description><generator>Hugo -- gohugo.io</generator><language>ko-KR</language><lastBuildDate>Sun, 17 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://seungyeop-lee.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>프로그래머의 뇌 요약</title><link>https://seungyeop-lee.github.io/blog/post/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%9D%98-%EB%87%8C-%EC%9A%94%EC%95%BD/</link><pubDate>Sun, 17 Apr 2022 00:00:00 +0000</pubDate><guid>https://seungyeop-lee.github.io/blog/post/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%9D%98-%EB%87%8C-%EC%9A%94%EC%95%BD/</guid><description>&lt;img src="https://seungyeop-lee.github.io/blog/post/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%9D%98-%EB%87%8C-%EC%9A%94%EC%95%BD/cover.png" alt="Featured image of post 프로그래머의 뇌 요약" />&lt;p>&lt;a class="link" href="http://www.yes24.com/Product/Goods/105911017" target="_blank" rel="noopener"
>프로그래머의 뇌&lt;/a>란 책을 읽고, 인상 깊었던 내용을 정리한다.&lt;/p>
&lt;h2 id="코드가-초래하는-세-가지-종류의-혼란">코드가 초래하는 세 가지 종류의 혼란&lt;/h2>
&lt;ol>
&lt;li>지식의 부족
&lt;ul>
&lt;li>프로그래밍 언어나 알고리즘, 업무 영역에 대한 지식 부족&lt;/li>
&lt;li>LTM의 문제&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>정보의 부족
&lt;ul>
&lt;li>라이브러리, 모듈, 패키지 등의 정보 (ex. 움직임) 부족&lt;/li>
&lt;li>STM의 문제&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>처리 능력의 부족
&lt;ul>
&lt;li>코드가 너무 복잡해서, 두뇌의 처리 용량이 부족&lt;/li>
&lt;li>작업 기억 공간의 문제&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="코딩에-영향을-주는-인지-과정">코딩에 영향을 주는 인지 과정&lt;/h2>
&lt;ol>
&lt;li>LTM (Long Term Memory)
&lt;ul>
&lt;li>기억이 아주 오랫동안 보관되며, 별 노력 없이 인출이 가능하다.&lt;/li>
&lt;li>프로그래밍에서는 추상적인 알고리즘, 프로그래밍 언어의 문법 뿐 아니라 키보드로 입력하는 동작을 기억하는 것까지 포함한다.&lt;/li>
&lt;li>컴퓨터의 하드 드라이브와 비슷&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>STM (Short Term Memory)
&lt;ul>
&lt;li>들어오는 정보를 잠시 보관하기 위해 사용&lt;/li>
&lt;li>크기에 제한이 있으며, 최대 12개를 넘지 않는다고 알려져 있다.&lt;/li>
&lt;li>코드에서 키워드, 변수명, 자료구조 등을 기억하는 것을 포함한다.&lt;/li>
&lt;li>컴퓨터의 메인 메모리와 비슷&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>작업 기억 공간
&lt;ul>
&lt;li>실제 사고 작용이 일어나는 공간&lt;/li>
&lt;li>컴퓨터의 프로세서와 비슷&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>코드를 읽는 동안 LTM, STM, 작업 기억 공간이 상보적으로 같이 일어난다.&lt;/p>
&lt;ul>
&lt;li>정보 -&amp;gt; 필터 -&amp;gt; STM -&amp;gt; 작업 기억 공간 -&amp;gt; LTM&lt;/li>
&lt;/ul>
&lt;h2 id="코드를-신속하게-읽는-방법">코드를 신속하게 읽는 방법&lt;/h2>
&lt;p>사람의 STM 용량은 2~6개 사이로 추정되며, 용량을 향상 시킬 수 없다. 그로 인해 생소한 코드를 읽는 것에 어려움을 느낀다. 청크를 이용하여 STM의 용량 한계를 극복할 수 있다.&lt;/p>
&lt;h3 id="청크-chunk">청크 (chunk)&lt;/h3>
&lt;p>몇 개의 그룹으로 묶은 정보, 하나의 청크는 STM의 기억 공간 하나만 차지한다.&lt;/p>
&lt;ul>
&lt;li>LTM에 지식이 많으면 그 지식으로 인해 청킹(chunking) 하기 용이하고, 결과적으로는 코드를 읽기 수월해진다.&lt;/li>
&lt;li>반대로 뛰어난 프로그래머라도 LTM에 아직 저장되지 않은 지식을 이용한 코드 읽기에는 어려움을 겪는다.
&lt;ul>
&lt;li>ex. 키워드, 구조, 도메인 개념 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="청킹-효율-향상-방법">청킹 효율 향상 방법&lt;/h3>
&lt;ul>
&lt;li>코드에서 자주 사용되고, 예상 가능한 흐름
&lt;ul>
&lt;li>ex. 디자인 패턴, 프로그래밍 구성 요소, 도메인 지식&lt;/li>
&lt;li>디자인 패턴을 교육 후, 해당 디자인 패턴으로 만들어진 코드를 수정하게 할 경우 더 짧은 시간에 수정을 완료하였다. 디자인 패턴이 적용되지 않은 코드를 수정할 경우에는 수정시간에 차이가 거의 없었다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>고수준 주석문
&lt;ul>
&lt;li>ex. 이 함수는 주어진 이진 트리를 중위 순회하며 프린트한다.&lt;/li>
&lt;li>저수준 주석문은 오히려 청킹 작업에 부담이 된다. (ex. i++; //i를 1만큼 증가)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>표식
&lt;ul>
&lt;li>단순 표식: 식별자 (변수명, 클래스명, 메서드명), 연산자, 구조문 등&lt;/li>
&lt;li>복합 표식: 2개 이상의 단순 표식을 합친 표식&lt;/li>
&lt;li>청크보단 작은 범위를 나타냄&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="문법을-기억하는-것이-중요한-이유">문법을 기억하는 것이 중요한 이유&lt;/h2>
&lt;p>문법 검색 등으로 업무가 중단되면 효율성에 큰 문제를 야기한다.&lt;/p>
&lt;ul>
&lt;li>보통 코딩 중단 후 다시 업무로 돌아가는데 약 15분 정도가 걸림&lt;/li>
&lt;li>메서드 수정 작업 도중 중단이 되고 나서 1분 이내에 하던 일을 다시 시작하는 경우는 10% 정도밖에 되지 않음&lt;/li>
&lt;li>업무가 중단되면 그동안 코드에 대한 중요한 정보를 잊어버리기 때문&lt;/li>
&lt;/ul>
&lt;h2 id="플래시카드를-통한-학습">플래시카드를 통한 학습&lt;/h2>
&lt;ul>
&lt;li>플래시카드를 사용하기 좋을 때
&lt;ul>
&lt;li>새로운 프로그래밍 언어나 프레임워크, 라이브러리를 배울 때 나오는 새로운 개념 학습&lt;/li>
&lt;li>어떤 개념을 검색할 때 (중요하다고 판단되는 개념만)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>연속으로 카드의 내용을 맞추면 개수를 줄이자&lt;/li>
&lt;/ul>
&lt;h2 id="오랫동안-기억을-유지하는-비결">오랫동안 기억을 유지하는 비결&lt;/h2>
&lt;ul>
&lt;li>오랫동안 학습한 만큼 더 오래 기억한다.
&lt;ul>
&lt;li>많은 시간 학습해야 한다는 것을 의미하는게 아님&lt;/li>
&lt;li>계속 반복하는 것이 중요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="저장-강도와-인출-강도">저장 강도와 인출 강도&lt;/h2>
&lt;p>LTM으로부터 기억을 가져오는 두가지 기제가 존재한다.&lt;/p>
&lt;ul>
&lt;li>저장 강도: LTM에 얼마나 잘 저장하고 있는가&lt;/li>
&lt;li>인출 강도: 무언가를 얼마나 쉽게 기억할 수 있는가&lt;/li>
&lt;/ul>
&lt;h3 id="두-강도의-상관관계">두 강도의 상관관계&lt;/h3>
&lt;ul>
&lt;li>저장 강도는 감소하지 않고 늘어나는 반면 인출 강도는 시간이 흐를수록 약해진다.&lt;/li>
&lt;li>학습을 추가로 하지 않고 정보를 기억하려고 능동적으로 노력하는 것만으로도 배운 것을 많이 기억할 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="문법을-기억하지-않음의-악순환">문법을 기억하지 않음의 악순환&lt;/h3>
&lt;ol>
&lt;li>정보를 찾는 것이 쉽기 때문에 문법을 기억 할 필요가 없다고 생각&lt;/li>
&lt;li>정보를 인출하려하지 않고, 검색하여 찾아 냄&lt;/li>
&lt;li>인출 강도가 강화되지 않음&lt;/li>
&lt;li>1번으로 돌아가 반복&lt;/li>
&lt;/ol>
&lt;h2 id="스키마와-정교화">스키마와 정교화&lt;/h2>
&lt;ul>
&lt;li>스키마(schema): 사고나 생각이 서로 관련되어 조직된 방식
&lt;ul>
&lt;li>ex. 1, 3, 15, 127, 63, 31 =&amp;gt; 이진수로 표현했을 때 모두 1로만 이루어진 숫자&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>정교화(eleboration): 기억하고자 하는 내용을 기존 기억과 연관 지으면서 생각하는 것, LTM에 이미 저장된 스키마타에 맞춰서 새로운 기억이 저장되는 것
&lt;ul>
&lt;li>ex. java의 반복문을 알고있는 사람이 golang의 반복문을 학습하는 경우&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="작업-기억-공간과-인지-부하">작업 기억 공간과 인지 부하&lt;/h2>
&lt;p>작업 기억 공간은 &amp;lsquo;문제에 적용된 STM&amp;rsquo;의 의미로 정보를 처리하는 역할을 한다.
그렇기에 STM과 동일하게 한 번에 2 ~ 6개의 항목만 저장이 가능하다.
이 용량이 채워짐의 정도를 인지 부하라 하며, 넘치게 될 경우 과부하(overload) 상태가 된다.&lt;/p>
&lt;h2 id="인지-부하의-종류">인지 부하의 종류&lt;/h2>
&lt;h3 id="내재적-부하">내재적 부하&lt;/h3>
&lt;p>문제 그 자체가 갖는 특성이 원인이 된 인지 부하&lt;/p>
&lt;h3 id="외재적-부하">외재적 부하&lt;/h3>
&lt;p>문제를 풀려는 과정의 복잡도가 원인이 된 인지 부하. 가지고 있는 지식에 따라 부하의 정도가 결정되는 특정이 있다.&lt;/p>
&lt;h3 id="본유적-부하">본유적 부하&lt;/h3>
&lt;p>LTM에 새로운 정보가 저장 될 때 발생하는 인지 부하&lt;/p>
&lt;h2 id="인지-부하를-줄이는-기법">인지 부하를 줄이는 기법&lt;/h2>
&lt;ul>
&lt;li>리팩터링 (인지적 리팩터링)&lt;/li>
&lt;li>생소한 언어 구성요소를 다른 것으로 대치 (ex. 삼항 연산자 -&amp;gt; if)&lt;/li>
&lt;li>플래시카드에 코드 동의어 추가&lt;/li>
&lt;/ul>
&lt;h2 id="앱-헝가리안-vs-시스템-헝가리안">앱 헝가리안 vs. 시스템 헝가리안&lt;/h2>
&lt;ul>
&lt;li>헝가리안 표기법: 변수명에 변수에 대한 정보를 접두어나 접미어의 형태로 추가하는 표기법&lt;/li>
&lt;li>시스템 헝가리안: 변수명에 타입을 나타내는 방식&lt;/li>
&lt;li>앱 헝가리안: 변수명에 역할이나 목적을 나타내는 방식&lt;/li>
&lt;li>현대의 타입 기반 프로그래밍 언어에서는 시스템 헝가리안을 사용하는 것이 권장되지는 않으나, 앱 헝가리안은 변수의 역할의 이해를 돕기때문에 여전히 유용한 방법이다.&lt;/li>
&lt;/ul></description></item><item><title>hugo와 github pages로 간단히 블로그 만들기</title><link>https://seungyeop-lee.github.io/blog/post/hugo%EC%99%80-github-pages%EB%A1%9C-%EA%B0%84%EB%8B%A8%ED%9E%88-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0/index/</link><pubDate>Sat, 13 Feb 2021 00:00:00 +0000</pubDate><guid>https://seungyeop-lee.github.io/blog/post/hugo%EC%99%80-github-pages%EB%A1%9C-%EA%B0%84%EB%8B%A8%ED%9E%88-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0/index/</guid><description>&lt;img src="https://seungyeop-lee.github.io/blog/post/hugo%EC%99%80-github-pages%EB%A1%9C-%EA%B0%84%EB%8B%A8%ED%9E%88-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0/index/hugo%EC%99%80-github-pages%EB%A1%9C-%EA%B0%84%EB%8B%A8%ED%9E%88-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0.png" alt="Featured image of post hugo와 github pages로 간단히 블로그 만들기" />&lt;h2 id="목차">목차&lt;/h2>
&lt;ol>
&lt;li>&lt;a class="link" href="../1" >블로그 만들기&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="../2" >github pages로 배포하기&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="../3" >기본 설정&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="../4" >포스팅 작성&lt;/a>&lt;/li>
&lt;li>블로그 꾸미기&lt;/li>
&lt;li>utterances로 댓글기능 추가하기&lt;/li>
&lt;/ol>
&lt;h2 id="목표">목표&lt;/h2>
&lt;ul>
&lt;li>블로그 진입점을 github pages의 루트가 아닌, 서브 path로 합니다.
&lt;ul>
&lt;li>ex. &lt;code>https://seungyeop-lee.github.io/test-blog/&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>하나의 repository에서 hugo의 소스파일과 생성된 html을 전부 관리합니다.&lt;/li>
&lt;li>github actions를 이용하여 push 할 경우, 자동으로 배포가 되게 합니다.&lt;/li>
&lt;li>utterances를 사용하여 댓글도 같은 repository에서 관리합니다.&lt;/li>
&lt;/ul>
&lt;h2 id="실습전-확인-사항">실습전 확인 사항&lt;/h2>
&lt;h3 id="주의">주의&lt;/h3>
&lt;p>시간이 지남에 따라 내용이 정확하지 않을 수 있습니다. 화면이나 움직임이 다를경우 공식 문서를 참고해주세요.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://gohugo.io/documentation/" target="_blank" rel="noopener"
>hugo&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.github.com/en/github/working-with-github-pages" target="_blank" rel="noopener"
>github pages&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://utteranc.es/" target="_blank" rel="noopener"
>utterances&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="전제-조건">전제 조건&lt;/h3>
&lt;ul>
&lt;li>git 설치&lt;/li>
&lt;li>github 계정 준비&lt;/li>
&lt;/ul>
&lt;h3 id="실습-환경">실습 환경&lt;/h3>
&lt;ul>
&lt;li>macOS 환경&lt;/li>
&lt;li>brew, vscode 사용&lt;/li>
&lt;/ul></description></item><item><title>Search</title><link>https://seungyeop-lee.github.io/blog/search/</link><pubDate>Sat, 06 Feb 2021 13:00:08 +0900</pubDate><guid>https://seungyeop-lee.github.io/blog/search/</guid><description/></item><item><title>Archives</title><link>https://seungyeop-lee.github.io/blog/archives/</link><pubDate>Sat, 06 Feb 2021 12:58:52 +0900</pubDate><guid>https://seungyeop-lee.github.io/blog/archives/</guid><description/></item><item><title>Links</title><link>https://seungyeop-lee.github.io/blog/links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://seungyeop-lee.github.io/blog/links/</guid><description/></item></channel></rss>