<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 펭귄의 외부 저장소</title><link>https://seungyeop-lee.github.io/blog/post/</link><description>Recent content in Posts on 펭귄의 외부 저장소</description><generator>Hugo -- gohugo.io</generator><language>ko-KR</language><lastBuildDate>Sun, 17 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://seungyeop-lee.github.io/blog/post/index.xml" rel="self" type="application/rss+xml"/><item><title>프로그래머의 뇌 요약</title><link>https://seungyeop-lee.github.io/blog/post/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%9D%98-%EB%87%8C-%EC%9A%94%EC%95%BD/</link><pubDate>Sun, 17 Apr 2022 00:00:00 +0000</pubDate><guid>https://seungyeop-lee.github.io/blog/post/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%9D%98-%EB%87%8C-%EC%9A%94%EC%95%BD/</guid><description>&lt;img src="https://seungyeop-lee.github.io/blog/post/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%9D%98-%EB%87%8C-%EC%9A%94%EC%95%BD/cover.png" alt="Featured image of post 프로그래머의 뇌 요약" />&lt;p>&lt;a class="link" href="http://www.yes24.com/Product/Goods/105911017" target="_blank" rel="noopener"
>프로그래머의 뇌&lt;/a>란 책을 읽고, 인상 깊었던 내용을 정리한다.&lt;/p>
&lt;h2 id="코드가-초래하는-세-가지-종류의-혼란">코드가 초래하는 세 가지 종류의 혼란&lt;/h2>
&lt;ol>
&lt;li>지식의 부족
&lt;ul>
&lt;li>프로그래밍 언어나 알고리즘, 업무 영역에 대한 지식 부족&lt;/li>
&lt;li>LTM의 문제&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>정보의 부족
&lt;ul>
&lt;li>라이브러리, 모듈, 패키지 등의 정보 (ex. 움직임) 부족&lt;/li>
&lt;li>STM의 문제&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>처리 능력의 부족
&lt;ul>
&lt;li>코드가 너무 복잡해서, 두뇌의 처리 용량이 부족&lt;/li>
&lt;li>작업 기억 공간의 문제&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="코딩에-영향을-주는-인지-과정">코딩에 영향을 주는 인지 과정&lt;/h2>
&lt;ol>
&lt;li>LTM (Long Term Memory)
&lt;ul>
&lt;li>기억이 아주 오랫동안 보관되며, 별 노력 없이 인출이 가능하다.&lt;/li>
&lt;li>프로그래밍에서는 추상적인 알고리즘, 프로그래밍 언어의 문법 뿐 아니라 키보드로 입력하는 동작을 기억하는 것까지 포함한다.&lt;/li>
&lt;li>컴퓨터의 하드 드라이브와 비슷&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>STM (Short Term Memory)
&lt;ul>
&lt;li>들어오는 정보를 잠시 보관하기 위해 사용&lt;/li>
&lt;li>크기에 제한이 있으며, 최대 12개를 넘지 않는다고 알려져 있다.&lt;/li>
&lt;li>코드에서 키워드, 변수명, 자료구조 등을 기억하는 것을 포함한다.&lt;/li>
&lt;li>컴퓨터의 메인 메모리와 비슷&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>작업 기억 공간
&lt;ul>
&lt;li>실제 사고 작용이 일어나는 공간&lt;/li>
&lt;li>컴퓨터의 프로세서와 비슷&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>코드를 읽는 동안 LTM, STM, 작업 기억 공간이 상보적으로 같이 일어난다.&lt;/p>
&lt;ul>
&lt;li>정보 -&amp;gt; 필터 -&amp;gt; STM -&amp;gt; 작업 기억 공간 -&amp;gt; LTM&lt;/li>
&lt;/ul>
&lt;h2 id="코드를-신속하게-읽는-방법">코드를 신속하게 읽는 방법&lt;/h2>
&lt;p>사람의 STM 용량은 2~6개 사이로 추정되며, 용량을 향상 시킬 수 없다. 그로 인해 생소한 코드를 읽는 것에 어려움을 느낀다. 청크를 이용하여 STM의 용량 한계를 극복할 수 있다.&lt;/p>
&lt;h3 id="청크-chunk">청크 (chunk)&lt;/h3>
&lt;p>몇 개의 그룹으로 묶은 정보, 하나의 청크는 STM의 기억 공간 하나만 차지한다.&lt;/p>
&lt;ul>
&lt;li>LTM에 지식이 많으면 그 지식으로 인해 청킹(chunking) 하기 용이하고, 결과적으로는 코드를 읽기 수월해진다.&lt;/li>
&lt;li>반대로 뛰어난 프로그래머라도 LTM에 아직 저장되지 않은 지식을 이용한 코드 읽기에는 어려움을 겪는다.
&lt;ul>
&lt;li>ex. 키워드, 구조, 도메인 개념 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="청킹-효율-향상-방법">청킹 효율 향상 방법&lt;/h3>
&lt;ul>
&lt;li>코드에서 자주 사용되고, 예상 가능한 흐름
&lt;ul>
&lt;li>ex. 디자인 패턴, 프로그래밍 구성 요소, 도메인 지식&lt;/li>
&lt;li>디자인 패턴을 교육 후, 해당 디자인 패턴으로 만들어진 코드를 수정하게 할 경우 더 짧은 시간에 수정을 완료하였다. 디자인 패턴이 적용되지 않은 코드를 수정할 경우에는 수정시간에 차이가 거의 없었다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>고수준 주석문
&lt;ul>
&lt;li>ex. 이 함수는 주어진 이진 트리를 중위 순회하며 프린트한다.&lt;/li>
&lt;li>저수준 주석문은 오히려 청킹 작업에 부담이 된다. (ex. i++; //i를 1만큼 증가)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>표식
&lt;ul>
&lt;li>단순 표식: 식별자 (변수명, 클래스명, 메서드명), 연산자, 구조문 등&lt;/li>
&lt;li>복합 표식: 2개 이상의 단순 표식을 합친 표식&lt;/li>
&lt;li>청크보단 작은 범위를 나타냄&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="문법을-기억하는-것이-중요한-이유">문법을 기억하는 것이 중요한 이유&lt;/h2>
&lt;p>문법 검색 등으로 업무가 중단되면 효율성에 큰 문제를 야기한다.&lt;/p>
&lt;ul>
&lt;li>보통 코딩 중단 후 다시 업무로 돌아가는데 약 15분 정도가 걸림&lt;/li>
&lt;li>메서드 수정 작업 도중 중단이 되고 나서 1분 이내에 하던 일을 다시 시작하는 경우는 10% 정도밖에 되지 않음&lt;/li>
&lt;li>업무가 중단되면 그동안 코드에 대한 중요한 정보를 잊어버리기 때문&lt;/li>
&lt;/ul>
&lt;h2 id="플래시카드를-통한-학습">플래시카드를 통한 학습&lt;/h2>
&lt;ul>
&lt;li>플래시카드를 사용하기 좋을 때
&lt;ul>
&lt;li>새로운 프로그래밍 언어나 프레임워크, 라이브러리를 배울 때 나오는 새로운 개념 학습&lt;/li>
&lt;li>어떤 개념을 검색할 때 (중요하다고 판단되는 개념만)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>연속으로 카드의 내용을 맞추면 개수를 줄이자&lt;/li>
&lt;/ul>
&lt;h2 id="오랫동안-기억을-유지하는-비결">오랫동안 기억을 유지하는 비결&lt;/h2>
&lt;ul>
&lt;li>오랫동안 학습한 만큼 더 오래 기억한다.
&lt;ul>
&lt;li>많은 시간 학습해야 한다는 것을 의미하는게 아님&lt;/li>
&lt;li>계속 반복하는 것이 중요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="저장-강도와-인출-강도">저장 강도와 인출 강도&lt;/h2>
&lt;p>LTM으로부터 기억을 가져오는 두가지 기제가 존재한다.&lt;/p>
&lt;ul>
&lt;li>저장 강도: LTM에 얼마나 잘 저장하고 있는가&lt;/li>
&lt;li>인출 강도: 무언가를 얼마나 쉽게 기억할 수 있는가&lt;/li>
&lt;/ul>
&lt;h3 id="두-강도의-상관관계">두 강도의 상관관계&lt;/h3>
&lt;ul>
&lt;li>저장 강도는 감소하지 않고 늘어나는 반면 인출 강도는 시간이 흐를수록 약해진다.&lt;/li>
&lt;li>학습을 추가로 하지 않고 정보를 기억하려고 능동적으로 노력하는 것만으로도 배운 것을 많이 기억할 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="문법을-기억하지-않음의-악순환">문법을 기억하지 않음의 악순환&lt;/h3>
&lt;ol>
&lt;li>정보를 찾는 것이 쉽기 때문에 문법을 기억 할 필요가 없다고 생각&lt;/li>
&lt;li>정보를 인출하려하지 않고, 검색하여 찾아 냄&lt;/li>
&lt;li>인출 강도가 강화되지 않음&lt;/li>
&lt;li>1번으로 돌아가 반복&lt;/li>
&lt;/ol>
&lt;h2 id="스키마와-정교화">스키마와 정교화&lt;/h2>
&lt;ul>
&lt;li>스키마(schema): 사고나 생각이 서로 관련되어 조직된 방식
&lt;ul>
&lt;li>ex. 1, 3, 15, 127, 63, 31 =&amp;gt; 이진수로 표현했을 때 모두 1로만 이루어진 숫자&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>정교화(eleboration): 기억하고자 하는 내용을 기존 기억과 연관 지으면서 생각하는 것, LTM에 이미 저장된 스키마타에 맞춰서 새로운 기억이 저장되는 것
&lt;ul>
&lt;li>ex. java의 반복문을 알고있는 사람이 golang의 반복문을 학습하는 경우&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="인지-부하">인지 부하&lt;/h2>
&lt;p>작업 기억 공간은 &amp;lsquo;문제에 적용된 STM&amp;rsquo;의 의미로 정보를 처리하는 역할을 한다.
그렇기에 STM과 동일하게 한 번에 2 ~ 6개의 항목만 저장이 가능하다.
이 용량이 채워짐의 정도를 인지 부하라 하며, 넘치게 될 경우 과부하(overload) 상태가 된다.&lt;/p>
&lt;h3 id="인지-부하의-종류">인지 부하의 종류&lt;/h3>
&lt;ul>
&lt;li>내재적 부하: 문제 그 자체가 갖는 특성이 원인이 된 인지 부하&lt;/li>
&lt;li>외재적 부하: 문제를 풀려는 과정의 복잡도가 원인이 된 인지 부하. 가지고 있는 지식에 따라 부하의 정도가 결정되는 특정이 있다.&lt;/li>
&lt;li>본유적 부하: LTM에 새로운 정보가 저장 될 때 발생하는 인지 부하&lt;/li>
&lt;/ul>
&lt;h3 id="인지-부하를-줄이는-기법">인지 부하를 줄이는 기법&lt;/h3>
&lt;ul>
&lt;li>리팩터링 (인지적 리팩터링)&lt;/li>
&lt;li>생소한 언어 구성요소를 다른 것으로 대치 (ex. 삼항 연산자 -&amp;gt; if)&lt;/li>
&lt;li>플래시카드에 코드 동의어 추가&lt;/li>
&lt;/ul>
&lt;h2 id="앱-헝가리안-vs-시스템-헝가리안">앱 헝가리안 vs. 시스템 헝가리안&lt;/h2>
&lt;ul>
&lt;li>헝가리안 표기법: 변수명에 변수에 대한 정보를 접두어나 접미어의 형태로 추가하는 표기법&lt;/li>
&lt;li>시스템 헝가리안: 변수명에 타입을 나타내는 방식&lt;/li>
&lt;li>앱 헝가리안: 변수명에 역할이나 목적을 나타내는 방식&lt;/li>
&lt;li>현대의 타입 기반 프로그래밍 언어에서는 시스템 헝가리안을 사용하는 것이 권장되지는 않으나, 앱 헝가리안은 변수의 역할의 이해를 돕기때문에 여전히 유용한 방법이다.&lt;/li>
&lt;/ul>
&lt;h2 id="텍스트-지식-vs-계획-지식">텍스트 지식 vs. 계획 지식&lt;/h2>
&lt;ul>
&lt;li>텍스트 지식: 키워드가 하는 일이나 변수의 역할 같은 프로그램의 표면적인 이해를 돕는 지식&lt;/li>
&lt;li>계획 지식: 프로그래머가 프로그램을 작성할 때 계획한 것이 무엇인지 혹은 무엇을 달성하려고 했는지에 대한 이해를 돕는 지식&lt;/li>
&lt;li>기술 스택, 프레임워크 (ex. 의존성 주입 프레임워크) 는 초점을 분리하기 때문에 실제 구조의 이해를 저하시키며, 즉 &amp;lsquo;계획 지식&amp;rsquo;을 쌓기 어렵게 한다.&lt;/li>
&lt;li>계획 지식을 얻기 위한 깊은 코드 이해를 위해서는 &amp;lsquo;초점&amp;rsquo;을 찾는 것이 중요하다.
&lt;ul>
&lt;li>초점은 main() 메서드같은 진입 점이나, 오류가 발생한 라인 등을 가리킨다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="프로그래밍-능력과-인지-능력의-상관관계">프로그래밍 능력과 인지 능력의 상관관계&lt;/h2>
&lt;ul>
&lt;li>**계산 능력(수학적 능력)**을 통한 프로그래밍 능력 예측: &lt;strong>2%&lt;/strong> 분산(편차)&lt;/li>
&lt;li>&lt;strong>언어 능력&lt;/strong>을 통한 프로그래밍 능력 예측: &lt;strong>17%&lt;/strong> 분산(편차)
&lt;ul>
&lt;li>얼마나 빨리 프로그래밍 언어를 배울 수 있는지에 대한 예측력은 크다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>작업 기억 공간 용량과 추론 능력&lt;/strong>을 통한 프로그래밍 능력 예측: &lt;strong>34%&lt;/strong> 분산(편차)&lt;/li>
&lt;li>%가 높을 수록 예측력이 높음을 의미&lt;/li>
&lt;/ul>
&lt;h2 id="모델-사용의-장단점">모델 사용의 장단점&lt;/h2>
&lt;p>모델은 문제의 특정 부분에만 집중하게 해주며, 이로인해 LTM이 관련된 기억을 찾는데 도움을 주기 때문에 문제 해결에 유용하다.
그러나 모델은 생각하는 방식을 제약하고, 생각을 특정한 방향으로 유도하기 때문에 오히려 문제를 어렵게 만들기도 한다.&lt;/p>
&lt;h2 id="정신모델">정신모델&lt;/h2>
&lt;ul>
&lt;li>풀어야 할 문제에 대해 추론하기 위해 사용할 수 있는 작업 기억 공간 내의 추상화된 모델이다.&lt;/li>
&lt;li>작업 기억 공간에서 먼저 만들어 지고, 경우에 따라 LTM으로 이동한다.&lt;/li>
&lt;li>문제 풀이 시 사용 가능한 모델이 LTM에 있으면 그 모델을 이용하여 작업 기억 공간에서 모델을 재구축 한다. 이때 만들어지는 모델은 LTM에 저장된 모델과 같지 않을 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="정신모델의-예">정신모델의 예&lt;/h3>
&lt;ul>
&lt;li>파일 시스템의 폴더와 파일의 구조: 실제로는 0과 1만을 가지고 있을 뿐&lt;/li>
&lt;li>코드의 특정라인이 실행: 실제로는 컴파일 되어 생성된 이진코드가 실행 되는 것임, 컴파일 타임에 최적화가 이뤄지는 경우 실제 동작은 코드와 다르게 수행 될 수 있다. (ex. case문의 최적화)&lt;/li>
&lt;/ul>
&lt;h3 id="정신모델의-특징와-예">정신모델의 특징와 예&lt;/h3>
&lt;ul>
&lt;li>불완전: 변수를 박스로 생각하는 것이 변수의 모든 특징을 설명하진 못한다.&lt;/li>
&lt;li>불안정: 처음에는 변수를 박스로 생각하지만, 변수에 대한 이해가 깊어지면서 이름표가 더 나은 모델이라고 생각한다.
&lt;ul>
&lt;li>나은 모델을 찾았다고 해서 먼저 만들어진 모델이 두뇌에서 삭제되지는 않는다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>모순이 있는 여러 개의 모델이 공존: 변수를 박스로도 이름표로도 생각 할 수 있다. 인지 부하가 높은 상황에서는 갑자기 오래된 모델을 사용 할 수도 있다.
&lt;ul>
&lt;li>오래된 모델이 상대적으로 더 단순한 모델일 가능성이 높고, 인지 부하가 높아지면 단순한 모델을 사용하는 것을 선호하기 때문&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>사용하지 않으려고 함: 디버깅 시 일반적으로 정신 모델을 만들어 해결하려하지 않고, 코드를 조금만 고치고 다시 돌려보고 버그가 해결됐는지 확인하는 것을 선호한다.&lt;/li>
&lt;/ul>
&lt;h2 id="개념적-기계-notional-machine">개념적 기계 (notional machine)&lt;/h2>
&lt;ul>
&lt;li>추상적 수준에서 컴퓨터가 코드를 실행하는 방법에 대해 추론할 때 사용하는 모델이다.&lt;/li>
&lt;li>개념적 기계는 프로그래밍 언어 수준에서 작동하며 기저에 있는 시스템의 모든 세부 사항은 추상화 한다.&lt;/li>
&lt;/ul>
&lt;h3 id="프로그래밍과-개념적-기계">프로그래밍과 개념적 기계&lt;/h3>
&lt;p>프로그래밍에 관해 말할 때는 암시적으로 개념적 기계를 사용하며, 개념적 기계의 구성을 나타내는 단어는 개념적 기계를 만들때 사용한 특정 정신 모델에 영향을 받아 만들어진다.
예를 들어&lt;/p>
&lt;ul>
&lt;li>파일의 &lt;strong>열림&lt;/strong>과 &lt;strong>닫힘&lt;/strong> 상태 =&amp;gt; 파일: 열고 닫을 수 있는 박스&lt;/li>
&lt;li>포인터가 특정 값을 &lt;strong>가리킨다&lt;/strong> =&amp;gt; 포인터: 특정 값의 위치 정보&lt;/li>
&lt;li>함수가 값을 &lt;strong>반환&lt;/strong>한다 =&amp;gt; 함수: 입력값을 넣으면 결과값이 나오는 기계&lt;/li>
&lt;/ul>
&lt;p>실제 세계의 객체와 동작을 이용하여 만든 개념적 기계로 정신모델을 구축 할 경우, 학습에는 용이하지만, 실제 코드의 움직임을 완전히 설명하지 못하거나 오해하게 만들 수 있다.
한번 저장된 정신 모델은 제거되지 않고, 지속적으로 사용되므로 실제 세계로부터 차용한 개념적 기계를 이용하여 학습하는 것은 신중하게 해야한다.&lt;/p></description></item></channel></rss>